import unittest
from mixed_entity_extraction import extract_mixed_edit_stock_details

class TestMixedEditStock(unittest.TestCase):
    def test_hindi_commands(self):
        # Test pure Hindi commands
        command = "‡§ö‡•Ä‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§¨‡§¶‡§≤‡•ã 5 ‡§ï‡§ø‡§≤‡•ã"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡•Ä‡§®‡•Ä")
        self.assertEqual(result.get("stock"), 5)
        
        command = "‡§Ü‡§≤‡•Ç ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç 10 ‡§ï‡§ø‡§≤‡•ã"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§Ü‡§≤‡•Ç")
        self.assertEqual(result.get("stock"), 10)
        
        command = "‡§¨‡§¶‡§≤‡•á‡§Ç ‡§∏‡•ç‡§ü‡•â‡§ï ‡§∏‡§æ‡§¨‡•Å‡§® 3"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§∏‡§æ‡§¨‡•Å‡§®")
        self.assertEqual(result.get("stock"), 3)
        
    def test_mixed_language_commands(self):
        # Test mixed language commands
        command = "Update stock of ‡§Ü‡§≤‡•Ç to 10 ‡§ï‡§ø‡§≤‡•ã"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§Ü‡§≤‡•Ç")
        self.assertEqual(result.get("stock"), 10)
        
        # Additional mixed language test cases
        command = "edit stock of ‡§ö‡§æ‡§µ‡§≤ to 20"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 20)
        
        command = "‡§¶‡§æ‡§≤ stock update to 15"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§¶‡§æ‡§≤")
        self.assertEqual(result.get("stock"), 15)
        
        command = "update ‡§Æ‡§∏‡§æ‡§≤‡§æ stock to 8"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§Æ‡§∏‡§æ‡§≤‡§æ")
        self.assertEqual(result.get("stock"), 8)
        
        command = "‡§®‡§Æ‡§ï stock ‡§¨‡§¶‡§≤‡•ã 7"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§®‡§Æ‡§ï")
        self.assertEqual(result.get("stock"), 7)
        
    def test_negative_stock_values(self):
        # Test negative stock values in mixed language commands
        command = "edit stock of ‡§ö‡§æ‡§µ‡§≤ to -20"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), -20)
        
        command = "‡§ö‡•Ä‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§¨‡§¶‡§≤‡•ã -5 ‡§ï‡§ø‡§≤‡•ã"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡•Ä‡§®‡•Ä")
        self.assertEqual(result.get("stock"), -5)
        
    def test_emoji_rich_commands(self):
        # Test commands with emojis
        command = "üì¶ Update stock of ‡§Ü‡§≤‡•Ç to 10 ‡§ï‡§ø‡§≤‡•ã ü•î"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§Ü‡§≤‡•Ç")
        self.assertEqual(result.get("stock"), 10)
        
        command = "üîÑ ‡§ö‡§æ‡§µ‡§≤ stock update ‚û°Ô∏è 20kg üçö"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 20)
        
    def test_multi_line_commands(self):
        # Test multi-line commands
        command = "Update stock\nof ‡§Ü‡§≤‡•Ç\nto 10 ‡§ï‡§ø‡§≤‡•ã"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§Ü‡§≤‡•Ç")
        self.assertEqual(result.get("stock"), 10)
        
        command = "‡§ö‡§æ‡§µ‡§≤\nstock update\nto 20kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 20)
        
    def test_structured_format_commands(self):
        # Test structured format commands (Pattern 6)
        command = "product: ‡§ö‡§æ‡§µ‡§≤, quantity: 20kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 20)
        
        # Test dash/colon separated formats (Pattern 7)
        command = "edit stock: ‡§Ü‡§≤‡•Ç - 10kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§Ü‡§≤‡•Ç")
        self.assertEqual(result.get("stock"), 10)
        
        # Test fuzzy matching fallback (Pattern 8)
        command = "updt stck of ‡§ö‡§æ‡§µ‡§≤ with 15 kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 15)
        
    def test_fuzzy_product_name_matching(self):
        # Test fuzzy matching for product names with common misspellings
        command = "update stock of chaval to 25kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 25)
        
        command = "aalu stock update to 15kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§Ü‡§≤‡•Ç")
        self.assertEqual(result.get("stock"), 15)
        
        command = "update stock of chini to 8kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡•Ä‡§®‡•Ä")
        self.assertEqual(result.get("stock"), 8)
        
        # Test with more extreme misspellings
        command = "update stock of choawal to 30kg"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 30)
        
        # Test with mixed emoji and misspellings
        command = "üîÑ choawal stock update ‚û°Ô∏è 20kg üçö"
        result = extract_mixed_edit_stock_details(command)
        self.assertEqual(result.get("name"), "‡§ö‡§æ‡§µ‡§≤")
        self.assertEqual(result.get("stock"), 20)

# For debugging mixed language commands
def debug_mixed_language_commands():
    commands = [
        # Original patterns
        "‡§ö‡•Ä‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§¨‡§¶‡§≤‡•ã 5 ‡§ï‡§ø‡§≤‡•ã",
        "‡§Ü‡§≤‡•Ç ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç 10 ‡§ï‡§ø‡§≤‡•ã",
        "‡§¨‡§¶‡§≤‡•á‡§Ç ‡§∏‡•ç‡§ü‡•â‡§ï ‡§∏‡§æ‡§¨‡•Å‡§® 3",
        "Update stock of ‡§Ü‡§≤‡•Ç to 10 ‡§ï‡§ø‡§≤‡•ã",
        "edit stock of ‡§ö‡§æ‡§µ‡§≤ to 20",
        "‡§¶‡§æ‡§≤ stock update to 15",
        "update ‡§Æ‡§∏‡§æ‡§≤‡§æ stock to 8",
        "‡§®‡§Æ‡§ï stock ‡§¨‡§¶‡§≤‡•ã 7",
        
        # New patterns - emoji rich
        "üì¶ Update stock of ‡§Ü‡§≤‡•Ç to 10 ‡§ï‡§ø‡§≤‡•ã ü•î",
        "üîÑ ‡§ö‡§æ‡§µ‡§≤ stock update ‚û°Ô∏è 20kg üçö",
        
        # New patterns - multi-line
        "Update stock\nof ‡§Ü‡§≤‡•Ç\nto 10 ‡§ï‡§ø‡§≤‡•ã",
        "‡§ö‡§æ‡§µ‡§≤\nstock update\nto 20kg",
        
        # New patterns - structured formats
        "product: ‡§ö‡§æ‡§µ‡§≤, quantity: 20kg",
        "edit stock: ‡§Ü‡§≤‡•Ç - 10kg",
        "updt stck of ‡§ö‡§æ‡§µ‡§≤ with 15 kg"
    ]
    
    for cmd in commands:
        print(f"Command: {cmd}")
        result = extract_mixed_edit_stock_details(cmd)
        print(f"Result: {result}\n")

# For debugging negative stock commands
def debug_negative_stock_commands():
    commands = [
        "edit stock of ‡§ö‡§æ‡§µ‡§≤ to -20",
        "‡§ö‡•Ä‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§¨‡§¶‡§≤‡•ã -5 ‡§ï‡§ø‡§≤‡•ã"
    ]
    
    for cmd in commands:
        print(f"Command: {cmd}")
        from nlp.mixed_entity_extraction import normalize_mixed_command
        normalized = normalize_mixed_command(cmd)
        print(f"Normalized: {normalized}")
        result = extract_mixed_edit_stock_details(cmd)
        print(f"Result: {result}\n")

if __name__ == "__main__":
    # Run the debug function for negative stock commands
    debug_negative_stock_commands()
    # Run the tests
    unittest.main()