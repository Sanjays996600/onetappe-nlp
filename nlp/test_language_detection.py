import unittest
import sys
import os

# Add the parent directory to the path so we can import the module
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from nlp.mixed_entity_extraction import detect_language, normalize_transliterated_hindi

class TestLanguageDetection(unittest.TestCase):
    def test_language_detection(self):
        """Test the language detection functionality"""
        # Test pure Hindi
        self.assertEqual(detect_language("‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à"), "hindi")
        
        # Test pure English
        self.assertEqual(detect_language("Today's weather is good"), "english")
        
        # Test mixed with Hindi dominance
        self.assertEqual(detect_language("‡§Ü‡§ú ‡§ï‡§æ weather ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à"), "mixed")
        
        # Test mixed with English dominance
        self.assertEqual(detect_language("Today's ‡§Æ‡•å‡§∏‡§Æ is good"), "mixed")
        
        # Test with emojis
        self.assertEqual(detect_language("Today's weather is good üåû"), "mixed")
        
        # Test with transliterated Hindi
        self.assertEqual(detect_language("aaj ka mausam accha hai"), "mixed")
        
        # Test with numbers
        self.assertEqual(detect_language("Stock 5 kg"), "english")
        self.assertEqual(detect_language("‡§∏‡•ç‡§ü‡•â‡§ï 5 ‡§ï‡§ø‡§≤‡•ã"), "hindi")
        
        # Test with empty string
        self.assertEqual(detect_language(""), "english")
        
        # Test with only punctuation and spaces
        self.assertEqual(detect_language("!@#$%^&*()"), "english")

class TestTransliteration(unittest.TestCase):
    def test_normalize_transliterated_hindi(self):
        """Test the transliteration normalization functionality"""
        # Test basic transliteration
        self.assertEqual(
            normalize_transliterated_hindi("aaj ka mausam accha hai"),
            "‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à"
        )
        
        # Test mixed language
        self.assertEqual(
            normalize_transliterated_hindi("aaj ka weather accha hai"),
            "‡§Ü‡§ú ‡§ï‡§æ weather ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à"
        )
        
        # Test with product names
        self.assertEqual(
            normalize_transliterated_hindi("chawal ka stock update karo"),
            "‡§ö‡§æ‡§µ‡§≤ ‡§ï‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•ã"
        )
        
        # Test with numbers and units
        self.assertEqual(
            normalize_transliterated_hindi("aalu 5 kilo update karo"),
            "‡§Ü‡§≤‡•Ç 5 ‡§ï‡§ø‡§≤‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•ã"
        )
        
        # Test with compound words
        self.assertEqual(
            normalize_transliterated_hindi("stockupdate karo"),
            "‡§∏‡•ç‡§ü‡•â‡§ï‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•ã"
        )
        
        # Test with punctuation and spaces
        self.assertEqual(
            normalize_transliterated_hindi("chawal, aalu, pyaaz"),
            "‡§ö‡§æ‡§µ‡§≤, ‡§Ü‡§≤‡•Ç, ‡§™‡•ç‡§Ø‡§æ‡§ú"
        )
        
        # Test with empty string
        self.assertEqual(normalize_transliterated_hindi(""), "")
        
        # Test with pure Hindi (should remain unchanged)
        self.assertEqual(
            normalize_transliterated_hindi("‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à"),
            "‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à"
        )
        
        # Test with pure English (should remain mostly unchanged)
        self.assertEqual(
            normalize_transliterated_hindi("update stock of rice"),
            "update ‡§∏‡•ç‡§ü‡•â‡§ï of rice"
        )

if __name__ == "__main__":
    unittest.main()